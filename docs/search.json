[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science con Python",
    "section": "",
    "text": "Prefacio\n¡Bienvenido(a) a la primera edición de Data Science con Python!\nEste libro, inicialmente concebido como una recopilación de notas personales para facilitar mi aprendizaje, ha evolucionado hasta convertirse en un recurso integral que cubre desde los fundamentos hasta técnicas avanzadas en ciencia de datos.\nMientras este libro de Python esta en progreso puedes apoyar el esfuerzo adquiriendo la versión “Data Science con R” en PDF en leanpub. Además, la compra incluye acceso a futuras actualizaciones y la posibilidad de realizar consultas directas conmigo durante tres meses sobre los temas tratados o su aplicación práctica.\nEn este libro trataremos temas cruciales como la ética en ciencia de datos, la reproducibilidad mediante Quarto y el control de versiones con Git y GitHub. Además, hemos fortalecido los contenidos sobre aprendizaje profundo, análisis de series temporales, minería de texto y análisis de sentimientos.\nLa versión web disponible en Github Pages busca democratizar el conocimiento en ciencia de datos. Compártelo y contribuyamos juntos a liberar el conocimiento.\nEsta versión se basa en ejercicios diseñados a partir de experiencias prácticas en clase y actividades de la Certificación Profesional en Data Science1 por HarvardX. El código utilizado para generar este libro está disponible en GitHub, fomentando la transparencia y la reproducibilidad.\nHemos mejorado y actualizado los ejercicios, incorporando casos prácticos recientes sobre análisis de redes sociales, cambio climático y minería de texto. Esto permite aplicar inmediatamente lo aprendido a problemas del mundo real.\nAgradezco profundamente a los lectores por sus comentarios y sugerencias, los cuales han sido fundamentales para mejorar esta versión.\nEste libro ha llegado a lectores en México, Colombia, España, Perú y Chile, entre otros países. Espero que sea una herramienta valiosa para avanzar en tu aprendizaje y práctica de ciencia de datos.\nSi tienes preguntas o sugerencias, puedes escribirme a dparedesi@uni.pe. Suelo responder en un plazo máximo de 48 horas.\nEsta obra está bajo una Licencia Creative Commons Atribución-NoComercial-CompartirIgual 4.0 Internacional.",
    "crumbs": [
      "Prefacio"
    ]
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "Data Science con Python",
    "section": "",
    "text": "https://online-learning.harvard.edu/series/professional-certificate-data-science↩︎",
    "crumbs": [
      "Prefacio"
    ]
  },
  {
    "objectID": "agradecimientos.html#footnotes",
    "href": "agradecimientos.html#footnotes",
    "title": "Agradecimientos",
    "section": "",
    "text": "https://hsph.harvard.edu/profile/rafael-a-irizarry/↩︎",
    "crumbs": [
      "Agradecimientos"
    ]
  },
  {
    "objectID": "introduccion.html",
    "href": "introduccion.html",
    "title": "Introducción",
    "section": "",
    "text": "Adentrándonos en el mundo de Python\nEn la era del Big Data, donde la información se genera a un ritmo vertiginoso, Python se alza como el lenguaje de programación esencial para descifrar el complejo mundo de los datos. No se trata solo de analizar hojas de cálculo; Python te empodera para extraer conocimiento invaluable de terabytes de información, automatizar tareas complejas y construir modelos predictivos que anticipen el futuro.\nImagina poder:\nEstos son solo algunos ejemplos del poder de Python en acción. A lo largo de este libro, te sumergirás en las herramientas y técnicas que te permitirán abordar desafíos del mundo real y convertirte en un experto en Data Science.",
    "crumbs": [
      "Introducción"
    ]
  },
  {
    "objectID": "introduccion.html#adentrándonos-en-el-mundo-de-python",
    "href": "introduccion.html#adentrándonos-en-el-mundo-de-python",
    "title": "Introducción",
    "section": "",
    "text": "Predecir el comportamiento de los clientes: Con Python, las empresas pueden identificar patrones de compra, segmentar audiencias y personalizar ofertas para aumentar sus ventas.\nDetectar fraudes financieros: Bancos y instituciones financieras utilizan Python para desarrollar sistemas de detección de anomalías que previenen pérdidas millonarias.\nDiagnosticar enfermedades con mayor precisión: En el campo de la salud, Python permite analizar imágenes médicas, identificar biomarcadores y desarrollar modelos de diagnóstico temprano.\nOptimizar el tráfico en tiempo real: Ciudades inteligentes utilizan Python para analizar datos de sensores y cámaras, optimizando el flujo vehicular y reduciendo la congestión.\n\n\n\n¿Qué es Python? Paradigmas y aplicaciones\nPython es un lenguaje de programación de alto nivel, interpretado y multiparadigma. Esto se traduce en:\n\nCódigo legible y fácil de aprender: Su sintaxis clara y concisa reduce la curva de aprendizaje, permitiéndote concentrarte en la lógica de la programación y no en complejidades sintácticas.\nDesarrollo rápido y flexible: Al ser interpretado, puedes ejecutar tu código sin necesidad de compilaciones, lo que acelera el proceso de desarrollo y facilita la experimentación.\nAdaptabilidad a diferentes estilos: Python soporta la programación orientada a objetos, la programación imperativa y la programación funcional, brindándote la flexibilidad para elegir el enfoque más adecuado para cada problema.\n\nVentajas de Python para Data Science: Python se ha convertido en el lenguaje predilecto para Data Science por un conjunto de características que lo hacen incomparable:\n\nLibrerías especializadas: Python cuenta con un ecosistema rico en librerías que aceleran y simplifican el trabajo del científico de datos. NumPy, Pandas, Scikit-learn, Matplotlib, TensorFlow… ¡un arsenal a tu disposición!\nComunidad activa y colaborativa: Miles de desarrolladores y científicos de datos contribuyen a la comunidad Python, creando nuevas herramientas, compartiendo conocimiento y brindando soporte.\nVersatilidad para todo el flujo de trabajo: Python no solo se utiliza para el análisis y modelado de datos, sino también para otras tareas cruciales en Data Science, como la extracción de datos (web scraping), la limpieza de datos y la automatización de procesos.\nEscalabilidad para proyectos de cualquier tamaño: Desde análisis exploratorios hasta sistemas de Machine Learning a gran escala, Python se adapta a tus necesidades.",
    "crumbs": [
      "Introducción"
    ]
  },
  {
    "objectID": "introduccion.html#instalación-y-entorno-de-desarrollo",
    "href": "introduccion.html#instalación-y-entorno-de-desarrollo",
    "title": "Introducción",
    "section": "Instalación y entorno de desarrollo",
    "text": "Instalación y entorno de desarrollo\n¡Manos a la obra! Antes de sumergirnos en el fascinante mundo de Python, necesitamos preparar el terreno. En esta sección, te guiaremos paso a paso en la instalación de Python y la configuración de tu entorno de desarrollo. No te preocupes, ¡es más sencillo de lo que parece!\n\nInstalando Python\nLo primero es instalar Python en tu sistema. Puedes descargar la última versión desde la página oficial de Python (python.org). Asegúrate de seleccionar la versión adecuada para tu sistema operativo (Windows, macOS o Linux). La instalación es sencilla, como cualquier otro programa. Simplemente sigue las instrucciones del instalador.\nTe recomendamos descargar la última versión estable de Python para aprovechar las nuevas características y mejoras.\n\n\n\nEntornos virtuales: tu espacio de trabajo aislado\nEn el mundo del desarrollo con Python, es fundamental utilizar entornos virtuales. ¿Por qué? Porque te permiten aislar las dependencias de cada proyecto. Imagina que estás trabajando en dos proyectos diferentes, uno que utiliza la versión 2 de una librería y otro que requiere la versión 3. ¡Un caos! Los entornos virtuales evitan este tipo de conflictos y te permiten gestionar las librerías de cada proyecto de forma independiente.\nPara crear un entorno virtual, puedes utilizar venv (incluido en Python 3) o conda (si utilizas Anaconda).\nCon venv:\n\npython3 -m venv nombre_de_tu_entorno\n\nCon conda:\n\nconda create -n nombre_de_tu_entorno python=3.9 \n\nRecuerda activar el entorno virtual antes de empezar a trabajar en tu proyecto.\nIDEs: Elige tu arma\nUn IDE (Entorno de Desarrollo Integrado) es como tu taller de trabajo. Te proporciona herramientas para escribir, ejecutar y depurar tu código de forma eficiente. Existen diferentes IDEs para Python, cada uno con sus propias características y ventajas. Aquí te presentamos algunos de los más populares:\n\nVS Code: Un editor ligero y versátil, con una gran cantidad de extensiones para personalizarlo a tu gusto. Es una excelente opción tanto para principiantes como para desarrolladores experimentados.\n\n\n\nPyCharm: Un IDE completo y potente, con funciones avanzadas para el análisis de código, la depuración y el desarrollo web. Es ideal para proyectos grandes y complejos.\n\n\n\nJupyter Notebook: Perfecto para la ciencia de datos y el aprendizaje automático. Te permite combinar código, texto y visualizaciones en un único documento. Es muy útil para la experimentación y la creación de prototipos.\n\n\n\nGoogle Colaboratory: Python en la nube\n\nSi buscas una opción aún más accesible, Google Colaboratory es la solución. Es un entorno de desarrollo en la nube que te permite escribir y ejecutar código Python directamente en tu navegador, sin necesidad de instalar nada en tu ordenador. Además, te proporciona acceso gratuito a GPUs (unidades de procesamiento gráfico), lo que lo hace ideal para proyectos de machine learning que requieren gran capacidad de cómputo.\n\nCon estas herramientas a tu disposición, ¡estarás listo para comenzar tu aventura en el mundo de Python! En el próximo apartado, exploraremos los diferentes tipos de datos que puedes manipular con este lenguaje.",
    "crumbs": [
      "Introducción"
    ]
  },
  {
    "objectID": "01.elementos-de-python.html",
    "href": "01.elementos-de-python.html",
    "title": "1  Elementos de Python",
    "section": "",
    "text": "1.1 Tipos de datos: los bloques de construcción de la información\nEn Python, los datos se representan mediante diferentes tipos de datos. Estos tipos de datos son como los diferentes tipos de bloques que podemos usar para construir una casa. Cada tipo de dato tiene características y propiedades específicas, y se utiliza para representar diferentes tipos de información.",
    "crumbs": [
      "I: Fundamentos y herramientas clave",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Elementos de Python</span>"
    ]
  },
  {
    "objectID": "01.elementos-de-python.html#tipos-de-datos-los-bloques-de-construcción-de-la-información",
    "href": "01.elementos-de-python.html#tipos-de-datos-los-bloques-de-construcción-de-la-información",
    "title": "1  Elementos de Python",
    "section": "",
    "text": "1.1.1 Números: enteros, flotantes, complejos\nLos números se utilizan para representar cantidades numéricas. En Python, existen tres tipos principales de números:\n\nEnteros (int): Representan números enteros, sin parte decimal (ej. 10, -5, 0).\nFlotantes (float): Representan números con parte decimal (ej. 3.14, -2.5, 0.0).\nComplejos (complex): Representan números complejos, con una parte real y una parte imaginaria (ej. 2 + 3j).\n\n\n\n1.1.2 Cadenas de texto (str)\nLas cadenas de texto se utilizan para representar texto. En Python, las cadenas se definen entre comillas simples (') o comillas dobles (\").\n\nmi_nombre = \"Juan\"\nmi_ciudad = 'Madrid'\n\nPodemos realizar diversas operaciones con las cadenas de texto, como:\n\nConcatenación: Unir dos o más cadenas.\n\nsaludo = \"Hola, \" + mi_nombre  # Output: \"Hola, Juan\"\n\nRepetición: Repetir una cadena varias veces.\n\neco = \"Hola\" * 3  # Output: \"HolaHolaHola\"\n\nIndexación: Acceder a caracteres individuales de una cadena.\n\ninicial = mi_nombre[0]  # Output: \"J\"\n\nRebanado (slicing): Extraer una porción de una cadena.\n\napellido = mi_nombre[2:5]  # Output: \"an\"\n\nLongitud: Obtener la longitud de una cadena (número de caracteres).\n\nlongitud_nombre = len(mi_nombre)  # Output: 4\n\nMétodos de cadena: Python ofrece una variedad de métodos para manipular cadenas, como convertir a mayúsculas o minúsculas, reemplazar caracteres, buscar subcadenas, etc.\n\nnombre_mayusculas = mi_nombre.upper()  # Output: \"JUAN\"\nnombre_minusculas = mi_nombre.lower()  # Output: \"juan\"\n\n\nLas cadenas de texto son una herramienta fundamental en la programación, ya que nos permiten trabajar con texto de diversas maneras, desde mostrar mensajes en la pantalla hasta procesar grandes cantidades de datos textuales.\n\n\n1.1.3 Booleanos (bool): Verdadero o Falso\nLos booleanos son un tipo de dato que representa valores de verdad: True (verdadero) o False (falso). Son como un interruptor que puede estar encendido o apagado.\nEn Python, los booleanos se utilizan para:\n\nRepresentar el resultado de comparaciones:\n\nedad = 25\nes_mayor_de_edad = edad &gt;= 18  # es_mayor_de_edad será True\n\nControlar el flujo de ejecución de un programa:\n\nif es_mayor_de_edad:\n    print(\"Puedes votar\")\nelse:\n    print(\"No puedes votar\")\n\nPuedes votar\n\n\nRealizar operaciones lógicas:\n\ntiene_licencia = True\ntiene_auto = False\npuede_conducir = tiene_licencia and tiene_auto  # puede_conducir será False\n\n\nOperadores lógicos:\nPython tiene tres operadores lógicos principales:\n\nand: Devuelve True si ambas expresiones son verdaderas.\nor: Devuelve True si al menos una de las expresiones es verdadera.\nnot: Invierte el valor de verdad de una expresión.\n\nEjemplos:\n\na = True\nb = False\n\na and b  # Output: False\n\nFalse\n\n\n\na or b   # Output: True\n\nTrue\n\n\n\nnot a    # Output: False\n\nFalse\n\n\nLos booleanos y los operadores lógicos son fundamentales para la toma de decisiones en la programación y para crear programas que respondan a diferentes situaciones.",
    "crumbs": [
      "I: Fundamentos y herramientas clave",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Elementos de Python</span>"
    ]
  },
  {
    "objectID": "01.elementos-de-python.html#variables-almacenando-y-manipulando-información",
    "href": "01.elementos-de-python.html#variables-almacenando-y-manipulando-información",
    "title": "1  Elementos de Python",
    "section": "1.2 Variables: Almacenando y manipulando información",
    "text": "1.2 Variables: Almacenando y manipulando información\nEn el mundo de la programación, las variables son elementos fundamentales que nos permiten almacenar y manipular datos. Piensa en ellas como cajas donde guardas información que luego podrás utilizar en tu programa. Estas cajas tienen etiquetas (los nombres de las variables) que te permiten acceder a la información de forma rápida y sencilla.\n\n1.2.1 Nombrando variables: convenciones y buenas prácticas\nEn Python, al igual que en cualquier lenguaje de programación, es fundamental elegir nombres de variables adecuados. No se trata solo de una cuestión estética, sino de una práctica que impacta directamente en la legibilidad y mantenibilidad del código.\n¿Por qué son importantes los nombres descriptivos?\nImagina que estás analizando un código con variables llamadas x, y y z. ¿Qué representan? ¿Un número? ¿Una lista de productos? ¿Las coordenadas de un punto en un mapa? Es imposible saberlo sin un análisis exhaustivo del código.\nEn cambio, si las variables se llaman edad_cliente, lista_productos y coordenadas_gps, su significado es evidente a simple vista. Esto facilita la comprensión del código, tanto para ti como para otros desarrolladores que puedan trabajar en el proyecto.\nConvenciones en Python: snake_case\nEn Python, la convención para nombrar variables es utilizar snake_case. Esto significa que los nombres de las variables se escriben en minúsculas, y las palabras se separan con guiones bajos (_).\nEjemplos:\n\nnombre_cliente\nprecio_producto\nfecha_nacimiento\ntotal_ventas_mensuales\n\nConsejos para nombrar variables:\n\nClaridad ante todo: El nombre debe reflejar con precisión el tipo de dato que almacena la variable.\nConcisión: Utiliza nombres cortos pero descriptivos.\nConsistencia: Mantén un estilo uniforme en todo tu código.\nEvita nombres genéricos: No uses nombres como x, y, z, a, b, c, a menos que su significado sea evidente en el contexto.\n\n\n\n1.2.2 Operaciones con variables\nUna vez que has elegido un nombre adecuado para tu variable, podemos realizar operaciones con ellas.\nEjemplos:\n\nSuma de variables:\n\na = 10\nb = 20\nsuma = a + b  # La variable suma almacenará el valor 30\nConcatenación de cadenas:\n\nnombre = \"Ana\"\napellido = \"García\"\nnombre_completo = nombre + \" \" + apellido  # La variable nombre_completo almacenará el valor \"Ana García\"\nActualización multiples: En Python, puedes realizar asignaciones múltiples en una sola línea:\nnombre, edad, ciudad = \"Laura\", 28, \"Madrid\"\n\nDominar el uso de variables es esencial para cualquier programador. Te permiten almacenar, manipular y transformar datos de forma eficiente, lo que abre un mundo de posibilidades en el desarrollo de tus proyectos.",
    "crumbs": [
      "I: Fundamentos y herramientas clave",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Elementos de Python</span>"
    ]
  },
  {
    "objectID": "01.elementos-de-python.html#operadores-aritméticos-relacionales-lógicos",
    "href": "01.elementos-de-python.html#operadores-aritméticos-relacionales-lógicos",
    "title": "1  Elementos de Python",
    "section": "1.3 Operadores: Aritméticos, relacionales, lógicos",
    "text": "1.3 Operadores: Aritméticos, relacionales, lógicos\nLos operadores son símbolos especiales que le indican al intérprete de Python que realice una operación específica, como una suma, una comparación o una evaluación lógica. Son herramientas esenciales que te permitirán manipular datos y controlar el flujo de tu programa.\n\n1.3.1 Operadores aritméticos\nEstos operadores se utilizan para realizar operaciones matemáticas básicas.\n\n\n\nOperador\nDescripción\nEjemplo\nResultado\n\n\n\n\n+\nSuma\n5 + 3\n8\n\n\n-\nResta\n10 - 4\n6\n\n\n*\nMultiplicación\n2 * 7\n14\n\n\n/\nDivisión\n15 / 3\n5\n\n\n%\nMódulo (resto)\n10 % 3\n1\n\n\n**\nPotencia\n2** 3\n8\n\n\n//\nDivisión entera\n10 // 3\n3\n\n\n\n\n\n1.3.2 Operadores relacionales\nEstos operadores se utilizan para comparar valores y determinar la relación entre ellos. El resultado de una operación relacional es un valor booleano (True o False).\n\n\n\nOperador\nDescripción\nEjemplo\nResultado\n\n\n\n\n==\nIgual a\n5 == 5\nTrue\n\n\n!=\nDistinto de\n10 != 5\nTrue\n\n\n&gt;\nMayor que\n7 &gt; 3\nTrue\n\n\n&lt;\nMenor que\n2 &lt; 8\nTrue\n\n\n&gt;=\nMayor o igual que\n5 &gt;= 5\nTrue\n\n\n&lt;=\nMenor o igual que\n4 &lt;= 10\nTrue\n\n\n\n\n\n1.3.3 Operadores lógicos\nEstos operadores se utilizan para combinar expresiones lógicas y crear condiciones más complejas.\n\n\n\n\n\n\n\n\n\nOperador\nDescripción\nEjemplo\nResultado\n\n\n\n\nand\nDevuelve True si ambas expresiones son verdaderas.\n(5 &gt; 3) and (10 &lt; 20)\nTrue\n\n\nor\nDevuelve True si al menos una de las expresiones es verdadera.\n(5 &lt; 3) or (10 &lt; 20)\nTrue\n\n\nnot\nInvierte el valor de la expresión. Si la expresión es True, devuelve False.\nnot (5 == 5)\nFalse\n\n\n\n\n\n1.3.4 Precedencia de operadores\nAl igual que en las matemáticas, los operadores en Python tienen un orden de precedencia. Esto significa que algunos operadores se evalúan antes que otros. Por ejemplo, la multiplicación tiene mayor precedencia que la suma.\nPuedes utilizar paréntesis () para controlar el orden de evaluación de las operaciones.\nEjemplo:\n\nresultado = 5 + 3 * 2  # resultado será 11 (primero se realiza la multiplicación)\nresultado = (5 + 3) * 2  # resultado será 16 (primero se realiza la suma)\n\nDominar el uso de los operadores es fundamental para escribir código eficiente y efectivo. Te permiten realizar cálculos, comparar valores y controlar el flujo de tu programa de forma precisa.",
    "crumbs": [
      "I: Fundamentos y herramientas clave",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Elementos de Python</span>"
    ]
  },
  {
    "objectID": "01.elementos-de-python.html#ejercicios",
    "href": "01.elementos-de-python.html#ejercicios",
    "title": "1  Elementos de Python",
    "section": "1.4 Ejercicios",
    "text": "1.4 Ejercicios\n¡Es hora de poner en práctica lo aprendido! A continuación, encontrarás una serie de ejercicios que te desafiarán a aplicar los conceptos de este capítulo. Recuerda que la práctica es clave para dominar Python.\nEjercicio 1: El precio del café\nImagina que trabajas en una cafetería. El precio de un café es de 2.50 euros. Un cliente te pide 3 cafés y te paga con un billete de 10 euros. Escribe un programa en Python que calcule cuánto cambio debes darle al cliente.\n\n\nSolución\n\n\nprecio_cafe = 2.50\ncantidad_cafe = 3\ntotal = precio_cafe * cantidad_cafe\npago_cliente = 10\ncambio = pago_cliente - total\nprint(\"El cambio es:\", cambio, \"euros\")\n\nEl cambio es: 2.5 euros\n\n\n\nEjercicio 2: El área de un triángulo\nEscribe un programa que calcule el área de un triángulo. El usuario debe introducir la base y la altura del triángulo. Recuerda que la fórmula para calcular el área de un triángulo es: (base * altura) / 2.\n\n\nSolución\n\n\nbase = float(input(\"Introduce la base del triángulo: \"))\naltura = float(input(\"Introduce la altura del triángulo: \"))\narea = (base * altura) / 2\nprint(\"El área del triángulo es:\", area)\n\n\nEjercicio 3: Manipulación de cadenas\nCrea un programa que pida al usuario su nombre y apellido. El programa debe mostrar un saludo personalizado que diga: “¡Hola, [nombre] [apellido]! Bienvenido/a.”\n\n\nSolución\n\n\nnombre = input(\"Introduce tu nombre: \")\napellido = input(\"Introduce tu apellido: \")\nprint(f\"¡Hola, {nombre} {apellido}! Bienvenido/a.\")\n\n\nEjercicio 4: Mayor de edad\nEscribe un programa que pida al usuario su edad. Si el usuario es mayor de edad (18 años o más), el programa debe mostrar el mensaje “Eres mayor de edad”. En caso contrario, debe mostrar “Eres menor de edad”.\n\n\nSolución\n\n\nedad = int(input(\"Introduce tu edad: \"))\nif edad &gt;= 18:\n  print(\"Eres mayor de edad\")\nelse:\n  print(\"Eres menor de edad\")\n\n\nEjercicio 5: Adivina el número\nCrea un programa que genere un número aleatorio entre 1 y 100. El usuario debe adivinar el número. El programa debe dar pistas al usuario, indicando si el número que ha introducido es mayor o menor que el número secreto. El juego termina cuando el usuario adivina el número.\n\n\nSolución\n\n\nimport random\n\nnumero_secreto = random.randint(1, 100)\nintentos = 0\n\nprint(\"¡He pensado un número entre 1 y 100!\")\n\nwhile True:\n  intentos += 1\n  numero_usuario = int(input(\"Adivina el número: \"))\n\n  if numero_usuario &lt; numero_secreto:\n    print(\"El número es mayor.\")\n  elif numero_usuario &gt; numero_secreto:\n    print(\"El número es menor.\")\n  else:\n    print(f\"¡Felicidades! Has adivinado el número en {intentos} intentos.\")\n    break\n\n\n¡Sigue practicando!\nEstos ejercicios son solo una muestra de lo que puedes hacer con los conocimientos adquiridos en este capítulo. Te animamos a que explores, experimentes y crees tus propios programas para seguir aprendiendo y dominando Python.",
    "crumbs": [
      "I: Fundamentos y herramientas clave",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Elementos de Python</span>"
    ]
  }
]